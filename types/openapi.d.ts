/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/recordings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List freestyle recordings */
        get: {
            parameters: {
                query?: {
                    beatId?: string;
                    artistName?: string;
                    explicit?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of recordings */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Recording"][];
                    };
                };
            };
        };
        put?: never;
        /** Upload new freestyle recording metadata */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Recording"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            recordingId?: string;
                            presignedUrl?: string;
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recordings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific recording */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recording found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Recording"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/votes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List votes for a recording */
        get: {
            parameters: {
                query: {
                    recordingId: string;
                    userId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of votes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Vote"][];
                    };
                };
                /** @description Missing recordingId */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Submit a vote for a recording */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Recording ID to vote on */
                        recordingId: string;
                        /**
                         * @description 1 for upvote, -1 for downvote
                         * @enum {integer}
                         */
                        voteValue: 1 | -1;
                    };
                };
            };
            responses: {
                /** @description Vote recorded */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top-rated freestyle recordings
         * @description Returns the top N recordings for a given date (default: today, format YYYYMMDD).
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Date in YYYYMMDD format. If omitted, uses today (UTC). */
                    date?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Leaderboard for the date */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            date?: string;
                            topRecordings?: string[];
                            /** Format: date-time */
                            generatedAt?: string;
                        };
                    };
                };
                /** @description Method not allowed */
                405: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available beats
         * @description Returns all available beats with metadata and presigned S3 URLs for audio and image.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of beats */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Beat"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Recording: {
            recordingId?: string;
            userId?: string;
            beatId?: string;
            artistName?: string;
            title?: string;
            s3Key?: string;
            /** Format: date-time */
            createdAt?: string;
            explicit?: boolean;
            fireRating?: number;
            voteCount?: number;
            playCount?: number;
        };
        Vote: {
            userId?: string;
            recordingId?: string;
            voteValue?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        LeaderboardEntry: {
            recordingId?: string;
            artistName?: string;
            fireRating?: number;
            voteCount?: number;
            playCount?: number;
            /** @enum {string} */
            timeFrame?: "day" | "week" | "month" | "all";
        };
        Beat: {
            beatId?: string;
            title?: string;
            producer?: string;
            genre?: string;
            bpm?: number;
            duration?: string;
            tags?: string[];
            description?: string;
            /** @description Presigned S3 URL for audio file */
            audioUrl?: string;
            /** @description Presigned S3 URL for cover image */
            imageUrl?: string;
            s3Key?: string;
            /** Format: date-time */
            createdAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
